#include <stdio.h>

// Function to implement FCFS scheduling
void FCFS(int processes[], int n, int bt[]) {
    int wt[n], tat[n];

    // Calculate Waiting Time (WT)
    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = bt[i - 1] + wt[i - 1];
    }

    // Calculate Turnaround Time (TAT)
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
    }

    // Display the results
    printf("\nFCFS Scheduling:\n");
    printf("Process | Burst Time | Waiting Time | Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("   P%d    |     %d     |      %d      |       %d\n", processes[i], bt[i], wt[i], tat[i]);
    }
}

// Function to implement Round Robin scheduling
void roundRobin(int processes[], int n, int bt[], int quantum) {
    int wt[n], tat[n], rem_bt[n];

    // Copy burst time to remaining burst time
    for (int i = 0; i < n; i++) {
        rem_bt[i] = bt[i];
    }

    int time = 0;
    int completed = 0;
    
    // Initialize waiting time and turnaround time
    for (int i = 0; i < n; i++) {
        wt[i] = 0;
        tat[i] = 0;
    }

    // Round Robin scheduling
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                if (rem_bt[i] > quantum) {
                    time += quantum;
                    rem_bt[i] -= quantum;
                } else {
                    time += rem_bt[i];
                    wt[i] = time - bt[i];
                    rem_bt[i] = 0;
                    completed++;
                }
            }
        }
    }

    // Calculate Turnaround Time (TAT)
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
    }

    // Display the results
    printf("\nRound Robin Scheduling (Quantum = %d):\n", quantum);
    printf("Process | Burst Time | Waiting Time | Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("   P%d    |     %d     |      %d      |       %d\n", processes[i], bt[i], wt[i], tat[i]);
    }
}

int main() {
    int n;

    // Get the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int processes[n];
    int bt[n];

    // Get the burst time for each process
    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i] = i + 1;
        printf("Process P%d: ", processes[i]);
        scanf("%d", &bt[i]);
    }

    // FCFS Scheduling
    FCFS(processes, n, bt);

    // Round Robin Scheduling
    int quantum;
    printf("\nEnter the time quantum for Round Robin: ");
    scanf("%d", &quantum);
    roundRobin(processes, n, bt, quantum);

    return 0;
}
